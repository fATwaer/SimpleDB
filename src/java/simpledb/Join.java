package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    OpIterator ch1, ch2;
    JoinPredicate p;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
    	this.p = p;
    	ch1 = child1;
    	ch2 = child2;
    	if (p.getOperator() == Predicate.Op.GREATER_THAN)
    		System.out.println("gt");
    }

    public JoinPredicate getJoinPredicate() {
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return ch1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return ch2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(ch1.getTupleDesc(), ch2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        ch1.open();
        ch2.open();
        this.open = true;
    }

    public void close() {
    	ch1.close();
    	ch2.close();
    	this.open = false;
    }

    public void rewind() throws DbException, TransactionAbortedException {
    	ch1.rewind();
    	ch2.rewind();
    	this.next = null;
    	t1 = t2 = null;
    }

    private boolean open;
    private Tuple next, t1, t2;
    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */

    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	if (t1 == null) {
    		if (ch1.hasNext())
    			t1 = ch1.next();
    		else
    			return null;
    	}
    	if (t2 == null) {
    		if (ch2.hasNext())
    			t2 = ch2.next();
    		else
    			return null;
    	}
    	
    	while (true) {
    		if (!ch2.hasNext()) {
        		if (ch1.hasNext()) {
        			t1 = ch1.next();
        			ch2.rewind();
        		} else {
        			return null;
        		}
        	}
    		if (t2 == null)
    			t2 = ch2.next();
    		if (p.filter(t1, t2)) // merge tuple
    		{			
    			next = new Tuple(this.getTupleDesc());
    			Iterator<Field> itr1 = t1.fields();
    			Iterator<Field> itr2 = t2.fields();
    			
    			int i = 0;
    			while (itr1.hasNext())
    				next.setField(i++, itr1.next());
    			while (itr2.hasNext())
    				next.setField(i++, itr2.next());
    			t2 = null;
    			return next;
    		}
    		t2 = null;
    	}
    }

    
    public boolean hasNext() throws DbException, TransactionAbortedException {
    	if (this.open != true)
    		throw new DbException("not open");
    	if (next == null)
    		fetchNext();
    	return next != null;
    }

    public Tuple next() throws DbException, TransactionAbortedException, NoSuchElementException {
    	if (next == null) {
    		fetchNext();
    		if (next == null)
    			throw new NoSuchElementException();
    	}
    	Tuple result = next;
    	next = null;
    	return result;
    }
    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return null;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
    }

}
